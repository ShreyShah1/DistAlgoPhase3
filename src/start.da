import sys
from scirpt import Config
import os
import logging

from Server import Server
from Client import Client
from Master import Master

def main():

######          INITIALIZE LOGGER                    ############
    logger = logging.getLogger(str(os.getpid()))
    hdlr = logging.FileHandler(str(os.getpid()) + '.log')
    formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
    hdlr.setFormatter(formatter)
    logger.addHandler(hdlr)
    logger.setLevel(logging.INFO)

######          INITIALIZE LOGGER                    ############


#########  Configuration Code   #############################

    i = 0
    config(channel="fifo")
    file_name = sys.argv[1]

    config_parameter = Config(file_name)
    total_number_of_banks = config_parameter.bank_count
    total_number_of_client= config_parameter.client_count
    client_access_details=  config_parameter.client_access_details
    request_packet       =  config_parameter.request_packet
    no_of_servers        =  config_parameter.no_of_servers
    timeout              =  config_parameter.timeout
    retry                =  config_parameter.retry
    lifetime_counts      =  config_parameter.lifetime_counts
    failureUponfailure   =  config_parameter.failureUponfailure
    extend               =  config_parameter.extend
    sleepbetweenrequests =  config_parameter.sleepbetweenrequests
    simulatepacketloss   =  config_parameter.simulatepacketloss

#########  Configuration Code   #############################

#############               FOR MASTER                  #############

    ps_master = new(Master, num = 1)

#############               FOR MASTER                  #############

############           FOR SERVER                #############
    all_server_details= dict()

    head_tail_details = dict()
    ps_server_list    = list()

    logger.info("Total number of Banks " + str(total_number_of_banks))
    for key,value in no_of_servers.items():

        logger.info("Initializing for bank " + str(key))
        logger.info("The number of servers "+ str(value))
        ps_server = new(Server , num = value)


        ps_list = list(ps_server)
        print(len(ps_list))
        ps_server_list.extend(ps_list)

        head_tail_details[key] = {'Head':'' , 'Tail': ''}
        all_server_details[key] = {}#{'Servers':[] , 'Alive_Count' :[]}

        servers_list = list()
        alive_count  = list()
        all_server_details[key]['Servers']     =  servers_list
        all_server_details[key]['Alive_Count'] = alive_count
        all_server_details[key]['Extend_Delay']  = extend[key]['Delay']
        all_server_details[key]['Extend_Flag']   = extend[key]['Flag']
        all_server_details[key]['Extend_FailureUponFailue']   = extend[key]['FailureUponFailue']

        for j in range(len(ps_list)):

            lifetime = lifetime_counts[key][j]
            failure  = failureUponfailure[key][j]
            all_server_details[key]['Servers'].append(ps_list[j])         ### Appending the servers
            all_server_details[key]['Alive_Count'].append(0)              ### Initialzing jth server Alive Count to Zero

            if(j == 0):

 #               logger.info("Initializing Head ")
                setup(ps_list[j],[None,ps_list[j+1],key,ps_master,j,lifetime,failure,simulatepacketloss])
                head_tail_details[key]['Head'] = ps_list[j]               ###  Storing Heads in Temporary Location


            elif(j == len(ps_list) - 1):
  #              logger.info("Initializing the Tail")
                setup(ps_list[j],[ps_list[j-1],None,key,ps_master,j,lifetime,failure,0])
                head_tail_details[key]['Tail'] = ps_list[j]               ###  Storing Tails in Temporary Location

            else:
   #             logger.info("Initializing the Middle server")
                setup(ps_list[j],[ps_list[j-1],ps_list[j+1],key,ps_master,j,lifetime,failure,0])

############           FOR SERVER                        #############

############                 FOR CLIENT                  #############3

    ps_client = new(Client, num = total_number_of_client)
    logger.info("Total Number of client " + str(total_number_of_client))
    ps_client_list = list(ps_client)

    for key,value in client_access_details.items():
        details = value
        setup(ps_client_list[i],[int(key),head_tail_details,details,request_packet,timeout,retry,sleepbetweenrequests])
        i = i + 1

#############               FOR CLIENT                  #############


#############               FOR MASTER                  #############

    setup(ps_master,[all_server_details,ps_client_list])

#############               FOR MASTER                  #############


    start(ps_master)
    start(ps_client)
    start(ps_server_list)
